<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>openSUSE 中文社区</title>
    <link></link>
    <description>openSUSE 中文社区主页，为您带来最新的 openSUSE 资讯，为中文用户的交流提供一席之地。</description>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/21/podman.html</guid>
      <title>使用 Podman 运行 WebAssembly 工作负载</title>
      <pubDate>Sun, 21 Jan 2024 19:40:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/21/podman.html</link>
      <author>Poplar at twilight</author>
      <description>WebAssembly（缩写为 Wasm）是一种可移植的二进制指令格式。它作为一种支持在Web 上部署客户端和服务器应用程序的编译目标的可移植性而广受欢迎。 我们可以通过结合 crun 和 Podman，利用 Wasm 的可移植性与 Linux 容器一起运行 Wasm 工作负载。crun 支持使用 WasmEdge、Wasmtime 或 Wasmer 运行时运行 Wasm 工作负载。虽然 Podman 使用为 runc，但 runc 和 crun 可以互换使用。 WasmEdge 是一个轻量级、高性能且可扩展的 WebAssembly 运行时，适用于云原生和边缘应用程序。WasmEdge 最近被添加到 openSUSE Tumbleweed 中，如果我们启用 crun 中的一项实验功能，就能在容器上支持 Wasm 工作负载。 现在，我们在 openSUSE Tumbleweed 中拥有了 WasmEdge，并且 crun 实验支持 Wasm 工作负载，我们可以在 Podman 上运行...</description>
      <content:encoded>&lt;p&gt;&lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt;（缩写为 Wasm）是一种可移植的二进制指令格式。它作为一种支持在Web 上部署客户端和服务器应用程序的编译目标的可移植性而广受欢迎。&lt;/p&gt;

&lt;p&gt;我们可以通过结合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 和 &lt;a href=&quot;https://podman.io/&quot;&gt;Podman&lt;/a&gt;，利用 Wasm 的可移植性与 Linux 容器一起运行 Wasm 工作负载。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 支持使用 &lt;a href=&quot;https://wasmedge.org/&quot;&gt;WasmEdge&lt;/a&gt;、&lt;a href=&quot;https://wasmtime.dev/&quot;&gt;Wasmtime&lt;/a&gt; 或 &lt;a href=&quot;https://wasmer.io/&quot;&gt;Wasmer&lt;/a&gt; 运行时运行 Wasm 工作负载。虽然 Podman 使用为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runc&lt;/code&gt;，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runc&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 可以互换使用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wasmedge.org/&quot;&gt;WasmEdge&lt;/a&gt; 是一个轻量级、高性能且可扩展的 WebAssembly 运行时，适用于云原生和边缘应用程序。WasmEdge 最近被添加到 &lt;a href=&quot;https://get.opensuse.org/tumbleweed/&quot;&gt;openSUSE Tumbleweed&lt;/a&gt; 中，如果我们启用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 中的一项实验功能，就能在容器上支持 Wasm 工作负载。&lt;/p&gt;

&lt;p&gt;现在，我们在 openSUSE Tumbleweed 中拥有了 WasmEdge，并且 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 实验支持 Wasm 工作负载，我们可以在 Podman 上运行 WebAssembly 工作负载。&lt;/p&gt;

&lt;h2 id=&quot;准备环境&quot;&gt;准备环境&lt;/h2&gt;

&lt;p&gt;我们首先需要在 Podman 的默认 OCI 运行时中将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 安装为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runc&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zypper in crun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装 crun 后，检查是否有 Wasm 支持。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ crun -v
crun version 1.9
commit: a538ac4ea1ff319bcfe2bf81cb5c6f687e2dc9d3
rundir: /run/user/1000/crun
spec: 1.0.0
+SYSTEMD +SELINUX +APPARMOR +CAP +SECCOMP +EBPF +CRIU +LIBKRUN +WASM:wasmedge +YAJL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面的输出中，我们可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crun&lt;/code&gt; 支持 WasmEdge (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+WASM:wasmedge&lt;/code&gt;)。&lt;/p&gt;

&lt;h2 id=&quot;准备应用&quot;&gt;准备应用&lt;/h2&gt;

&lt;p&gt;我们将用 Rust 创建一个简单的 “Hello” 应用程序。&lt;/p&gt;

&lt;p&gt;首先，确保安装了 Rust 和 WasmEdge。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zypper in rust wasmedge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在让我们用 Rust 创建 “Hello” 应用程序。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cargo new hello --bin
$ cd hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/main.rs&lt;/code&gt; 中的消息更改为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello WebAssembly!&lt;/code&gt; 或你想要的任何其他消息。&lt;/p&gt;

&lt;p&gt;现在让我们编译我们的应用程序，但目标机器将是 Wasm。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cargo build --target wasm32-wasi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们现在可以执行刚刚编译的二进制文件并检查它是否按预期工作。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wasmedge run target/wasm32-wasi/debug/hello.wasm
Hello WebAssembly!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你已成功构建 Wasm 应用程序。&lt;/p&gt;

&lt;h2 id=&quot;创建-wasm-容器&quot;&gt;创建 Wasm 容器&lt;/h2&gt;

&lt;p&gt;有了 Wasm 二进制文件，我们将其添加到容器中。&lt;/p&gt;

&lt;p&gt;创建一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Containerfile&lt;/code&gt; 的文件并向其中添加以下内容：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM scratch
COPY target/wasm32-wasi/debug/hello.wasm /
CMD [&quot;/hello.wasm&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们使用 Buildah 构建 Wasm 容器。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ buildah build --platform=wasi/wasm -t hello-wasm .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在你应该有一个 Wasm 容器了。&lt;/p&gt;

&lt;h2 id=&quot;运行-wasm-工作负载&quot;&gt;运行 Wasm 工作负载&lt;/h2&gt;

&lt;p&gt;让我们使用 Podman 运行 Wasm 容器。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ podman run --rm hello-wasm
Hello WebAssembly!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;太棒了，我们有一个可用的 Wasm 容器。&lt;/p&gt;

&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;

&lt;p&gt;WebAssembly 是一个相当新的话题，但它已经获得了很多关注，因为你可以重复使用你已经知道或使用的大部分内容，并轻松地移植应用程序。&lt;/p&gt;

&lt;p&gt;运行原生 Wasm 容器是这种格式的可移植性的另一个例子。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2024/01/19/podman-wasm-support/&quot;&gt;Running WebAssembly workloads with Podman&lt;/a&gt;，作者：Alexandre Vicenzi&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/19/slowroll.html</guid>
      <title>澄清对 Slowroll 的误解</title>
      <pubDate>Fri, 19 Jan 2024 19:40:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/19/slowroll.html</link>
      <author>Poplar at twilight</author>
      <description>一项用例调查的结果提供了关于人们如何看待 openSUSE Slowroll 的一些有深度的信息。 有些人将其视为 openSUSE Leap 的替代品，但最近关于 Leap 明确发展方向的消息应有助于解释 Slowroll 的不同发展道路。 Slowroll 是于 2023 年推出的一个实验性发行版。在 openSUSE Leap 的未来尚未明朗时，它被设计为 openSUSE Tumbleweed 的变种。 与 Tumbleweed 相比，该发行版的主要特点是滚动发布速度较慢。 一些用户可能会发现 Tumbleweed 的快速更新与 openSUSE Leap 等传统稳定版本之间的平衡很有价值。毕竟，开源软件的目的和原则是促进软件自由，使用户可以出于任何目的自由地研究、修改和分发软件；而 Slowroll 正在做以上所有的事情。 Slowroll 每隔一个月左右就会进行一次大更新，同时还会不断进行错误修复和安全更新。 Slowroll 背后的理念是提供一种发行版，在提高稳定性的同时，又不会失去对内核、桌面环境和打包等基础软件包中新功能的访问。这些较慢的更新周期允许在纳入软件包之前对其进行更广泛的测试和验证。用户可以把 Slowroll 看作是 “跳转” 而不是 “飞跃”。 关于 Slowroll 与 openSUSE Leap 的关系，需要注意的是 Slowroll 并不是...</description>
      <content:encoded>&lt;p&gt;一项&lt;a href=&quot;https://news.opensuse.org/2023/11/06/results-of-use-case-survey-published/&quot;&gt;用例调查&lt;/a&gt;的结果提供了关于人们如何看待 &lt;a href=&quot;https://en.opensuse.org/openSUSE:Slowroll&quot;&gt;openSUSE Slowroll&lt;/a&gt; 的一些有深度的信息。&lt;/p&gt;

&lt;p&gt;有些人将其视为 openSUSE Leap 的替代品，但最近关于 &lt;a href=&quot;https://suse.org.cn/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/14/leap16.html&quot;&gt;Leap 明确发展方向&lt;/a&gt;的消息应有助于解释 Slowroll 的不同发展道路。&lt;/p&gt;

&lt;p&gt;Slowroll 是于 2023 年推出的一个实验性发行版。在 openSUSE Leap 的未来尚未明朗时，它被设计为 &lt;a href=&quot;https://get.opensuse.org/tumbleweed/&quot;&gt;openSUSE Tumbleweed&lt;/a&gt; 的变种。&lt;/p&gt;

&lt;p&gt;与 Tumbleweed 相比，该发行版的主要特点是滚动发布速度较慢。&lt;/p&gt;

&lt;p&gt;一些用户可能会发现 Tumbleweed 的快速更新与 openSUSE Leap 等传统稳定版本之间的平衡很有价值。毕竟，开源软件的目的和原则是促进软件自由，使用户可以出于任何目的自由地研究、修改和分发软件；而 Slowroll 正在做以上所有的事情。&lt;/p&gt;

&lt;p&gt;Slowroll 每隔一个月左右就会进行一次大更新，同时还会不断进行错误修复和安全更新。&lt;/p&gt;

&lt;p&gt;Slowroll 背后的理念是提供一种发行版，在提高稳定性的同时，又不会失去对内核、桌面环境和打包等基础软件包中新功能的访问。这些较慢的更新周期允许在纳入软件包之前对其进行更广泛的测试和验证。用户可以把 Slowroll 看作是 “跳转” 而不是 “飞跃”。&lt;/p&gt;

&lt;p&gt;关于 Slowroll 与 openSUSE Leap 的关系，需要注意的是 Slowroll 并不是 Leap 的替代品。相反，它为寻求更多最新软件的用户提供了一个替代选择，其速度比 Tumbleweed 慢，但比 Leap 快得多。在 SUSE Linux Enterprise 发行版的未来分支过渡到 ALP（自适应 Linux 平台）的背景下，这一点尤为重要。Slowroll 的开发源于 openSUSE 开发人员对 openSUSE Leap 发行版未来的讨论，但与 Leap 发行版没有其他关系。&lt;/p&gt;

&lt;p&gt;Slowroll 仍然相当新，并且基于 openSUSE Tumbleweed 软件包。&lt;/p&gt;

&lt;p&gt;虽然 Slowroll 是 openSUSE 系列的重要补充，但它迎合了选择速度稍慢的最新软件系统的用户。选择 Slowroll 这个名称是为了反映其较慢的更新周期，并在社区投票过程后保留下来。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2024/01/19/clarifying-misunderstandings-of-slowroll/&quot;&gt;Clarifying Misunderstandings of Slowroll&lt;/a&gt;，作者：Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/14/leap16.html</guid>
      <title>为 openSUSE Leap 设定清晰的路线</title>
      <pubDate>Sun, 14 Jan 2024 19:40:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/14/leap16.html</link>
      <author>Poplar at twilight</author>
      <description>openSUSE 发布团队确认 Leap 15 将有后续版本，而且是一次数字上的飞跃。 正如许多人热切期待今年 Leap 15.6 的到来一样，人们也在等待作为继任者的 Leap 16。openSUSE Leap 16 基于 SUSE 新的自适应 Linux 平台 (ALP) 代码库，将兼具先进的企业服务器发行版的优势和 Leap 系列的用户友好的维护和安全性。 Leap 16 的目标是在 SUSE 开发 ALP 和有效整合社区软件包的过程中，在前沿和传统 Linux 操作系统之间取得平衡。 向 Leap 16 的过渡不仅仅是数字上的提升，而是象征着技术和用户体验的重大进步。openSUSE Leap 的未来基于 SUSE ALP 的创新理念。 ALP 将为下一代 openSUSE Leap、Leap Micro 和 SUSE 解决方案提供支持。它使发行版更具适应性，更适合云原生工作负载，同时也能够处理快速的创新。 我们鼓励每个人通过提供反馈、包装、测试、记录和其他任何方式参与这些新平台的开发。 Leap...</description>
      <content:encoded>&lt;p&gt;openSUSE 发布团队确认 Leap 15 将有后续版本，而且是一次数字上的飞跃。&lt;/p&gt;

&lt;p&gt;正如许多人热切期待今年 Leap 15.6 的到来一样，人们也在等待作为继任者的  Leap 16。openSUSE Leap 16 基于 SUSE 新的&lt;a href=&quot;https://susealp.io/&quot;&gt;自适应 Linux 平台&lt;/a&gt; (ALP) 代码库，将兼具先进的企业服务器发行版的优势和 Leap 系列的用户友好的维护和安全性。&lt;/p&gt;

&lt;p&gt;Leap 16 的目标是在 SUSE 开发 ALP 和有效整合社区软件包的过程中，在前沿和传统 Linux 操作系统之间取得平衡。&lt;/p&gt;

&lt;p&gt;向 Leap 16 的过渡不仅仅是数字上的提升，而是象征着技术和用户体验的重大进步。openSUSE Leap 的未来基于 SUSE ALP 的创新理念。&lt;/p&gt;

&lt;p&gt;ALP 将为下一代 openSUSE Leap、Leap Micro 和 SUSE 解决方案提供支持。它使发行版更具适应性，更适合云原生工作负载，同时也能够处理快速的创新。&lt;/p&gt;

&lt;p&gt;我们鼓励每个人通过提供反馈、包装、测试、记录和其他任何方式参与这些新平台的开发。&lt;/p&gt;

&lt;p&gt;Leap 将继续遵循 &lt;a href=&quot;https://en.opensuse.org/openSUSE:Factory_development_model&quot;&gt;openSUSE factory 开发模式&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;开发过程将包括收集需求，包括来自社区研讨会的需求，以确保 Leap 16.0 满足用户不断变化的需求。openSUSE 社区已经在期待 Leap 16 的推出。&lt;/p&gt;

&lt;p&gt;除了 Leap 16，Leap Micro 6.0 也将接替 Leap Micro 5 系列。它基于 SUSE Linux Enterprise Micro 6.0，侧重于容器化和虚拟化工作负载。&lt;/p&gt;

&lt;p&gt;Leap 和 Leap Micro 都将为用户提供清晰的迁移路径和充足的升级时间。如果 Leap 16 出现延迟，发布团队可能会延长 Leap 15.6 的生命周期，或者在万不得已的情况下发布 Leap 15.7，以确保足够的缓冲过渡。我们将确保 Leap 16 的发布与 Leap 15 的生命周期结束之间没有空档期。&lt;/p&gt;

&lt;p&gt;人们可以在 openSUSE 项目的&lt;a href=&quot;https://en.opensuse.org/openSUSE:Roadmap&quot;&gt;路线图&lt;/a&gt;页面上找到有关 Leap 16 的最新信息。发布团队将与大家分享 Leap 16 开发的启动时间以及如何通过 &lt;a href=&quot;https://en.opensuse.org/openSUSE:Communication_channels&quot;&gt;openSUSE 官方渠道&lt;/a&gt;参与其中。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2024/01/15/clear-course-is-set-for-os-leap/&quot;&gt;Clear Course is Set for openSUSE Leap&lt;/a&gt;，作者：Lubos Kocman 和 Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/11/new-event.html</guid>
      <title>会议增加了以商业为中心的社交活动</title>
      <pubDate>Thu, 11 Jan 2024 19:40:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/11/new-event.html</link>
      <author>Poplar at twilight</author>
      <description>openSUSE 项目非常高兴地宣布 Open 4 Business 交流活动将于 6 月 26 日下午 2 点至 6 点在德国纽伦堡的弗兰肯校园举行，该活动是由 DORS/CLUC 组织发起的一项合作计划。 该活动将与 openSUSE 大会 2024（oSC24）同期举行，致力于促进开源商业社区的联系。 该活动旨在帮助建立一个商业环境，使在开源道德和技术方面拥有相似价值观的中小型企业结成联盟。Open 4 Business 活动旨在成为连接开源爱好者的桥梁。该活动将帮助商界人士有效地参与和合作。 Open 4 Business 的主要目标是： 强调商界与开源社区有着共同的纽带 提供实现可持续和开放业务的平台 促进企业与开源项目的合作 促进中小型企业、自由职业者和企业集团之间建立网络和伙伴关系 该活动为渴望拓展业务网络、发现新项目和与同行专家接触的任何人提供了机会。openSUSE 项目诚邀您参加 Open 4 Business 活动。 openSUSE 项目对 DORS/CLUC 组织在发起 #open4business 交流活动中所起的作用表示感谢，并希望帮助将这一商务交流活动扩展到其他社区驱动的开源技术会议。 如需参加，请发送以 “open4business” 为主题的电子邮件至 ddemaio@opensuse.org，或在 Open 4...</description>
      <content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.opensuse.org/&quot;&gt;openSUSE 项目&lt;/a&gt;非常高兴地宣布 Open 4 Business 交流活动将于 6 月 26 日下午 2 点至 6 点在德国纽伦堡的弗兰肯校园举行，该活动是由 &lt;a href=&quot;https://www.dorscluc.org/open-4-business/&quot;&gt;DORS/CLUC&lt;/a&gt; 组织发起的一项合作计划。&lt;/p&gt;

&lt;p&gt;该活动将与 &lt;a href=&quot;https://events.opensuse.org/&quot;&gt;openSUSE 大会 2024&lt;/a&gt;（oSC24）同期举行，致力于促进开源商业社区的联系。&lt;/p&gt;

&lt;p&gt;该活动旨在帮助建立一个商业环境，使在开源道德和技术方面拥有相似价值观的中小型企业结成联盟。Open 4 Business 活动旨在成为连接开源爱好者的桥梁。该活动将帮助商界人士有效地参与和合作。&lt;/p&gt;

&lt;p&gt;Open 4 Business 的主要目标是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;强调商界与开源社区有着共同的纽带&lt;/li&gt;
  &lt;li&gt;提供实现可持续和开放业务的平台&lt;/li&gt;
  &lt;li&gt;促进企业与开源项目的合作&lt;/li&gt;
  &lt;li&gt;促进中小型企业、自由职业者和企业集团之间建立网络和伙伴关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该活动为渴望拓展业务网络、发现新项目和与同行专家接触的任何人提供了机会。openSUSE 项目诚邀您参加 Open 4 Business 活动。&lt;/p&gt;

&lt;p&gt;openSUSE 项目对 DORS/CLUC 组织在发起 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#open4business&lt;/code&gt; 交流活动中所起的作用表示感谢，并希望帮助将这一商务交流活动扩展到其他社区驱动的开源技术会议。&lt;/p&gt;

&lt;p&gt;如需参加，请发送以 “open4business” 为主题的电子邮件至 &lt;a href=&quot;mailto:ddemaio@opensuse.org&quot;&gt;ddemaio@opensuse.org&lt;/a&gt;，或在 Open 4 Business 选择中提交建议。Open 4 Business 活动的演讲将在 6 月 26 日的 4 小时内进行，每位演讲者的演讲时间不超过 15 分钟。请注意，该活动的演讲将在商务交流环节中进行，有别于 6 月 27 至 29 日举行的会议技术环节。活动将在 Katzwanger Str. 130 举行，该地点位于紧邻 SUSE 纽伦堡办事处的 1 楼。&lt;/p&gt;

&lt;p&gt;为 &lt;a href=&quot;https://events.opensuse.org/&quot;&gt;oSC24&lt;/a&gt; 提交提案的截止日期为 4 月 15 日。大会将在 SUSE 纽伦堡办事处街边的 &lt;a href=&quot;https://z-bau.com/&quot;&gt;Z-Bau&lt;/a&gt; 举行。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2024/01/12/conference-adds-business-focused-networking-event/&quot;&gt;Conference Adds Business Focused Networking Event&lt;/a&gt;，作者：Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/08/workshop-of-gsoc.html</guid>
      <title>openSUSE 项目将举办导师申请研讨会</title>
      <pubDate>Mon, 08 Jan 2024 19:40:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2024/01/08/workshop-of-gsoc.html</link>
      <author>Poplar at twilight</author>
      <description>openSUSE 项目将于世界标准时间 1 月 16 日 15:30 在 meet.opensuse.org/meeting 上举办研讨会，重点关注今年的谷歌编程之夏申请和指导工作。

openSUSE 项目在参与 GSoC 方面有着悠久的传统，我们希望作为导师参与活动的社区成员应出席会议，或通过在 openSUSE 的 GitHub Mentoring 项目上打开一个问题来更新他们希望在 101.opensuse.org 上列出的项目。

研讨会将在 openSUSE 社区会议之后举行，以确定今年申请的项目数量，申请时间为 1 月 22 日至 2 月 6 日。

在管理员提交 GSoC 申请之前，研讨会将为导师和希望参与指导工作的人员提供足够的时间来描述几个项目构想。

我们鼓励参与者在研讨会前在活动的 etherpad 上创建一些项目构想的大纲。

参加过往届谷歌编程之夏项目的导师和管理员将出席研讨会。



原文：Project to have Workshop for Mentorship Application，作者：	Douglas DeMaio
</description>
      <content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.opensuse.org/&quot;&gt;openSUSE&lt;/a&gt; 项目将于世界标准时间 1 月 16 日 15:30 在 &lt;a href=&quot;https://meet.opensuse.org/meeting&quot;&gt;meet.opensuse.org/meeting&lt;/a&gt; 上举办研讨会，重点关注今年的&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;谷歌编程之夏&lt;/a&gt;申请和指导工作。&lt;/p&gt;

&lt;p&gt;openSUSE 项目在参与 GSoC 方面有着悠久的传统，我们希望作为导师参与活动的社区成员应出席会议，或通过在 openSUSE 的 &lt;a href=&quot;https://github.com/openSUSE/mentoring&quot;&gt;GitHub Mentoring&lt;/a&gt; 项目上打开一个问题来更新他们希望在 &lt;a href=&quot;https://101.opensuse.org/&quot;&gt;101.opensuse.org&lt;/a&gt; 上列出的项目。&lt;/p&gt;

&lt;p&gt;研讨会将在 &lt;a href=&quot;https://calendar.opensuse.org/teams/marketing/events/tuesday_weekly_meeting&quot;&gt;openSUSE 社区会议&lt;/a&gt;之后举行，以确定今年申请的项目数量，申请时间为 1 月 22 日至 2 月 6 日。&lt;/p&gt;

&lt;p&gt;在管理员提交 GSoC 申请之前，研讨会将为导师和希望参与指导工作的人员提供足够的时间来描述几个项目构想。&lt;/p&gt;

&lt;p&gt;我们鼓励参与者在研讨会前在活动的 &lt;a href=&quot;https://etherpad.opensuse.org/p/GSoC2024WS&quot;&gt;etherpad&lt;/a&gt; 上创建一些项目构想的大纲。&lt;/p&gt;

&lt;p&gt;参加过往届谷歌编程之夏项目的导师和管理员将出席研讨会。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2024/01/09/project-plans-workshop-for-gsoc-mentorship/&quot;&gt;Project to have Workshop for Mentorship Application&lt;/a&gt;，作者：	Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/2023/12/21/systemd-fde.html</guid>
      <title>Tumbleweed 和 MicroOS 的 Systemd-boot 与全盘加密</title>
      <pubDate>Thu, 21 Dec 2023 19:40:00 +0000</pubDate>
      <link>/%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/2023/12/21/systemd-fde.html</link>
      <author>Poplar at twilight</author>
      <description>Tumbleweed 和 MicroOS 的 Systemd-boot 与全盘加密 openSUSE 和 MicroOS 现在提供一个使用 systemd-boot 作为引导加载程序，并基于 systemd 进行全盘加密的镜像。加密设备的解锁可以通过传统密码、TPM2（系统中已存在的加密设备），如果系统健康状况良好，将附加该设备，或 FIDO2 密钥（验证令牌的所有权）来完成。。 要解释的东西很多，但基本上这些变化都是为了让发行版变得更安全。一方面是使发行版的设计更加简单，另一方面是顺应当前的安全趋势，其他发行版也在向这一趋势看齐。 那么，让我们从头开始…… systemd-boot 我们都知道并喜欢 GRUB2。它是一个很好的引导加载器。同时，它也是一个丰富而庞杂，开发进展缓慢的程序， openSUSE 为 GRUB2 引导加载器打了 200 多个补丁。其中一些补丁已经存在了 5 年、6 年，甚至……10 年。这既表明了维护者的才华，也表明了上游贡献过程有多慢的问题。 GRUB2 支持所有相关系统，包括大型机、arm 和 powerpc 等；支持多种类型的文件系统，包括 btrfs 和 NTFS 等。它包含一个完整的网络协议栈、一个 USB 协议栈、一个可用以编写脚本的终端……从某种意义上说，它本身几乎就是一个微型操作系统。 但随着 UEFI 于 18 年前发布，使得 GRUB2 提供的几乎所有功能都变得多余。系统固件已经将这些功能中的大部分作为服务提供，操作系统、引导加载器或任何其他用户提供的应用程序都可以使用这些服务。当然，GRUB2 也支持...</description>
      <content:encoded>&lt;h2 id=&quot;tumbleweed-和-microos-的-systemd-boot-与全盘加密&quot;&gt;Tumbleweed 和 MicroOS 的 Systemd-boot 与全盘加密&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://get.opensuse.org/tumbleweed/&quot;&gt;openSUSE&lt;/a&gt; 和 &lt;a href=&quot;https://get.opensuse.org/microos/&quot;&gt;MicroOS&lt;/a&gt; 现在提供一个使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 作为引导加载程序，并基于 &lt;a href=&quot;https://freedesktop.org/wiki/Software/systemd/&quot;&gt;systemd&lt;/a&gt; 进行全盘加密的镜像。加密设备的解锁可以通过传统密码、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt;（系统中已存在的加密设备），如果系统健康状况良好，将附加该设备，或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥（验证令牌的所有权）来完成。。&lt;/p&gt;

&lt;p&gt;要解释的东西很多，但基本上这些变化都是为了让发行版变得更安全。一方面是使发行版的设计更加简单，另一方面是顺应当前的安全趋势，其他发行版也在向这一趋势看齐。&lt;/p&gt;

&lt;p&gt;那么，让我们从头开始……&lt;/p&gt;

&lt;h3 id=&quot;systemd-boot&quot;&gt;systemd-boot&lt;/h3&gt;

&lt;p&gt;我们都知道并喜欢 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt;。它是一个很好的引导加载器。同时，它也是一个丰富而庞杂，开发进展缓慢的程序，&lt;/p&gt;

&lt;p&gt;openSUSE 为 &lt;a href=&quot;https://www.gnu.org/software/grub/grub-download.html&quot;&gt;GRUB2&lt;/a&gt; 引导加载器打了 200 多个补丁。其中一些补丁已经存在了 5 年、6 年，甚至……10 年。这既表明了维护者的才华，也表明了上游贡献过程有多慢的问题。&lt;/p&gt;

&lt;p&gt;GRUB2 支持所有相关系统，包括大型机、&lt;a href=&quot;https://www.arm.com/&quot;&gt;arm&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/PowerPC&quot;&gt;powerpc&lt;/a&gt; 等；支持多种类型的文件系统，包括 &lt;a href=&quot;https://btrfs.wiki.kernel.org/&quot;&gt;btrfs&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/NTFS&quot;&gt;NTFS&lt;/a&gt; 等。它包含一个完整的网络协议栈、一个 USB 协议栈、一个可用以编写脚本的终端……从某种意义上说，它本身几乎就是一个微型操作系统。&lt;/p&gt;

&lt;p&gt;但随着 &lt;a href=&quot;https://en.wikipedia.org/wiki/UEFI&quot;&gt;UEFI&lt;/a&gt; 于 18 年前发布，使得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 提供的几乎所有功能都变得多余。系统固件已经将这些功能中的大部分作为服务提供，操作系统、引导加载器或任何其他用户提供的应用程序都可以使用这些服务。当然，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 也支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UEFI&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;很快，&lt;a href=&quot;https://www.kernel.org/&quot;&gt;Linux 内核&lt;/a&gt;就可以通过附加到内核代码的 stub 来编译为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EFI&lt;/code&gt; 二进制文件。这意味着内核本身可以直接由固件启动，使得引导加载器在大多数情况下变得可有可无。&lt;/p&gt;

&lt;p&gt;随着时间的推移，出现了新的、更直接的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UEFI&lt;/code&gt; 引导加载器，如 &lt;a href=&quot;https://cgit.freedesktop.org/gummiboot/&quot;&gt;gummiboot&lt;/a&gt;。后来，这些代码被集成到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 中，并更名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 代码非常简单，比 GRUB2 简单许多。它基本上是一个非常小的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EFI&lt;/code&gt; 二进制文件，提供一个包含不同引导加载器条目（&lt;a href=&quot;https://uapi-group.org/specifications/specs/boot_loader_specification/&quot;&gt;Boot Loader Specification&lt;/a&gt; 或简称 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLS&lt;/code&gt; 中描述的文本文件）的菜单，并调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UEFI LoadImage&lt;/code&gt; 函数将执行委托给所选的内核。&lt;/p&gt;

&lt;p&gt;该引导加载器还可以使用新的&lt;a href=&quot;https://uapi-group.org/specifications/specs/unified_kernel_image/&quot;&gt;统一内核映像&lt;/a&gt;（UKI）；&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UKI&lt;/code&gt; 是将内核、命令行和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 整合在一起的文件。这些 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UKI&lt;/code&gt; 对于基于映像的发行版来说非常方便，openSUSE 也计划支持它们。&lt;/p&gt;

&lt;p&gt;提供 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 作为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 的替代方案是 openSUSE 一直想做的事。2023 年 8 月，&lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/4FNZ7HEPH6KQQ2JVFNPN7PXWHZZRU5H5/&quot;&gt;Factory 邮件列表&lt;/a&gt;上发布了关于 Tumbleweed 支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 的公告。&lt;/p&gt;

&lt;p&gt;公告引用了一个 &lt;a href=&quot;https://en.opensuse.org/Systemd-boot&quot;&gt;wiki 条目&lt;/a&gt;，解释了如何手动将使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 的安装迁移到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;。公告发布后不久，&lt;a href=&quot;https://github.com/yast/yast-bootloader&quot;&gt;yast-bootloader&lt;/a&gt; 就&lt;a href=&quot;https://github.com/yast/yast-bootloader/pull/686&quot;&gt;获得了&lt;/a&gt;对新安装方案的支持。&lt;/p&gt;

&lt;p&gt;支持另一个引导加载程序是有代价的。如上所述，代码库更小，错误更少，更容易推理。但对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UEFI&lt;/code&gt; 的依赖减少了支持的架构数量（目前支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86-64&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aarch64&lt;/code&gt;）。通过为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 提供另一个补丁来支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLS&lt;/code&gt; 条目，可以大大缓解这个问题，这样引导加载器背后的发行版架构就可以独立于引导加载器本身。好消息是该补丁已经存在，并且有可能添加到软件包中。&lt;/p&gt;

&lt;p&gt;另一个问题是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 不支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btrfs&lt;/code&gt;。作为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EFI&lt;/code&gt; 二进制文件，它只能从 &lt;a href=&quot;https://en.wikipedia.org/wiki/File_Allocation_Table#FAT32&quot;&gt;FAT32&lt;/a&gt; 文件系统读取文件。将&lt;a href=&quot;https://www.kernel.org/&quot;&gt;内核&lt;/a&gt;和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 移入 &lt;a href=&quot;https://en.wikipedia.org/wiki/EFI_system_partition&quot;&gt;EFI 系统分区&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP&lt;/code&gt;) 可以解决这一限制。&lt;/p&gt;

&lt;p&gt;最后，还要考虑在 Tumbleweed 中支持快照，在 MicroOS 中支持 &lt;a href=&quot;https://microos.opensuse.org/blog/2018-04-20-transactionalupdates2/&quot;&gt;transaction&lt;/a&gt;。用户应能从引导加载器中选择从哪个快照启动，就像使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 时一样。这两个概念都是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;btrfs&lt;/code&gt; 子卷实现的，而且只有内核、命令行、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 组合的子集对每个子卷有效。&lt;/p&gt;

&lt;p&gt;例如，假设我们的系统中有两个快照，每个快照都代表一个安装了两个内核的系统。所有快照中的这两个内核可能都不相同。也许其中一次升级用更新的版本替换了一个内核。我们需要一些工具来完成关联正确组合所需的簿记工作，以便成功启动到这些快照中的任何一个，并在这些限制下创建启动项。&lt;/p&gt;

&lt;p&gt;这个工具就是 &lt;a href=&quot;https://github.com/openSUSE/sdbootutil&quot;&gt;sdbootutil&lt;/a&gt;。每次 &lt;a href=&quot;https://zh.opensuse.org/openSUSE:Snapper_Tutorial&quot;&gt;snapper&lt;/a&gt; 创建或销毁快照时（例如，系统更新时），它都会调用这个工具，分析快照的内容，确保 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP&lt;/code&gt; 中安装了相应的内核，存在该内核的有效 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt;（如果没有，则调用 &lt;a href=&quot;https://linux.die.net/man/8/mkinitrd&quot;&gt;mkinitrd&lt;/a&gt; 创建），并创建一个启动项，通过命令行连接内核、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 和快照。它还会处理其他细节，如检查分区的可用空间。&lt;/p&gt;

&lt;p&gt;通常情况下，它的处理过程是透明的，但请记住，我们可以使用以下方式强制进入干净状态：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sdbootutil add-all-kernels
sdbootutil remove-all-kernels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以防万一，你知道……&lt;/p&gt;

&lt;h3 id=&quot;全盘加密&quot;&gt;全盘加密&lt;/h3&gt;

&lt;p&gt;我们要宣布的另一个方面是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 的&lt;a href=&quot;https://en.wikipedia.org/wiki/Full_disk_encryption&quot;&gt;全盘加密&lt;/a&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt;）支持。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt; 并不是新生事物。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 很久以前就可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cryptomount&lt;/code&gt; 命令解锁 &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup&quot;&gt;LUKS&lt;/a&gt; 卷。传统上，这会向用户请求两次密码：一次是在启动加载程序解锁时，另一次是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 解锁时。有一些方法可以避免第二次请求，比如将密码注入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt;，或者，如果使用 openSUSE 软件包，它会将密码透明地注入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最近，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 获得了两个新功能：部分支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 加密设备（使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/PBKDF2&quot;&gt;PBKDF2&lt;/a&gt; 作为密钥派生函数，而不是更安全且推荐的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;Argon2id&lt;/a&gt;）以及可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 等设备中存储机密的密钥保护机制。&lt;/p&gt;

&lt;h3 id=&quot;tpm2&quot;&gt;TPM2&lt;/h3&gt;

&lt;p&gt;要详细解释 &lt;a href=&quot;https://en.wikipedia.org/wiki/TPM2&quot;&gt;TPM2&lt;/a&gt; 的工作原理是另一篇文章的主题，但现在我们可以把它看作是一个加密设备，只有在满足与系统状态相关的特定条件时，才能用来解锁秘密。如果系统处于健康状态，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 就会解锁秘密。&lt;/p&gt;

&lt;p&gt;该术语是一个技术术语，与断言（assert）系统处于&lt;strong&gt;已知&lt;/strong&gt;的良好状态有关。换句话说，我们确信固件没有被篡改，引导加载程序是我们安装的并且没有被替换，内核正是来自发行版的内核，内核命令行是我们所期望的，并且我们使用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 不包含任何我们无法控制的额外二进制文件。&lt;/p&gt;

&lt;p&gt;TPM2 内部有一些寄存器，称为&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/security/hardware-security/tpm/switch-pcr-banks-on-tpm-2-0-devices&quot;&gt;平台配置寄存器&lt;/a&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt;）。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 规范中，共有 24 个这样的寄存器，其中每一个的大小足以存储 &lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA1&lt;/a&gt; 或 &lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-2&quot;&gt;SHA256&lt;/a&gt; 等哈希函数的值。这些寄存器由库分隔：每个支持的散列函数有一个库，但现在说得太详细了。&lt;/p&gt;

&lt;p&gt;这些寄存器比较特殊。我们可以重置它们，通常是将其值设置为 0。我们可以读取其值，也可以“扩展”它们。写入操作的设计方式是，我们不能在寄存器中设置任何随机值，除非是相关哈希函数将当前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值和用户提供的新值连接起来的结果。&lt;/p&gt;

&lt;p&gt;只有使用完全相同的数值序列扩展该寄存器，才能产生当前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值。如果我们改变其中一个值的哪怕一个比特，那么同样的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 将产生完全不同的最终结果。&lt;/p&gt;

&lt;p&gt;这一功能用于“&lt;a href=&quot;https://en.opensuse.org/Portal:MicroOS/RemoteAttestation#Measured_boot&quot;&gt;测量启动&lt;/a&gt;”过程，即在执行启动链的每个阶段之前对其进行测量。这意味着，在固件的初始阶段运行之前，内存中有一个进程会计算代码的哈希值，并使用该值扩展其中一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt;。这一过程一直重复到启动序列的最末端：内核和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;当测量引导到位后，前 10 个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 的最终值将包含只有在机器使用已知版本的固件、引导加载器和内核以及相关数据（如证书、配置文件或内核参数）时才能预测的值。如果其中一个元素发生变化（例如，使用了不同的安全启动证书），就会产生与我们预期不同的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 芯片是非常有趣的设备，其功能远远超出了测量启动的范围。如果你想了解更多，我推荐你参考 &lt;a href=&quot;https://developers.tpm.dev/&quot;&gt;TPM.dev&lt;/a&gt; 或 &lt;a href=&quot;https://trustedcomputinggroup.org/resource/a-practical-guide-to-tpm-2-0/&quot;&gt;A Practical Guide to TPM 2.0&lt;/a&gt; 等资源。&lt;/p&gt;

&lt;h3 id=&quot;fde-的-tpm2&quot;&gt;FDE 的 TPM2&lt;/h3&gt;

&lt;p&gt;总之，这里的要点是，我们可以创建一个 “策略”，指示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 只有在某些 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 包含预期值的情况下才对秘密进行解密。具体细节略有不同，但现在让我们把这个模型作为一个很好的第一近似值。&lt;/p&gt;

&lt;p&gt;我们的想法是，我们可以使用某些 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 寄存器的值来加密密码，这样，如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 可以恢复密码，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 就可以在稍后附加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 设备，从而在此之前验证系统的健康状况。如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 无法解密，则意味着某些 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 的值与预期不符，启动过程中的某个阶段发生了变化。在这种情况下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 会要求用户输入密码，以继续加载内核和系统的其他部分。它将新状态的信任委托给用户。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 还提供了一个工具，用于根据 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 子集的当前值封存秘密。这很好，但也带来了几个问题。一个问题是，也许我们在设置系统时知道 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 的值会在下一次启动时发生变化（例如，在第一次安装、升级引导加载器或更新固件时）。在这种情况下，使用当前寄存器值密封密码是没有用的：我们需要能够预测新的寄存器值，并使用这些假设值进行密封。&lt;/p&gt;

&lt;p&gt;另一个问题更为隐蔽，稍后会变得至关重要。预期值可能会经常变化，而且不可能是唯一的。也许有一组有效值。我们可以选择从不同的内核或快照启动。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 提供了一种使用授权策略（authorized policies）的解决方案。授权策略是一种创建策略的方法，策略可以更改，但通过签名进行验证。从本质上讲，我们创建了一个公钥和一个私钥，并创建了多个使用私钥签名的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 策略。现在，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 可以使用公钥部分验证签名，并使用存储在新策略中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值解密。&lt;/p&gt;

&lt;p&gt;自 2023 年初起，openSUSE 提供了 &lt;a href=&quot;https://github.com/okirch/pcr-oracle&quot;&gt;pcr-oracle&lt;/a&gt; 工具，帮助预测 PCR 寄存器，并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 策略或授权策略在这些值下加密密钥。使用该工具，我们现在可以在一组可能发生变化的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值下加密密钥！&lt;/p&gt;

&lt;p&gt;在 openSUSE wiki 中，你可以找到更多关于这些主题的&lt;a href=&quot;https://en.opensuse.org/SDB:Encrypted_root_file_system&quot;&gt;文档&lt;/a&gt;，包括如何在安装中使用的说明。&lt;/p&gt;

&lt;h3 id=&quot;使用-systemd-进行磁盘加密&quot;&gt;使用 systemd 进行磁盘加密&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt; 可以正常工作，为什么还要寻找其他方法呢？其中一个原因非常明显：这种架构只有……嗯……只有在使用我们的 openSUSE &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 版本时才能工作。它不适用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 等其他引导加载器。事实上，它本身也不适用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 的上游版本。&lt;/p&gt;

&lt;p&gt;但还有第二个原因：我们可以说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 没有完全测量引导。如果引导加载器在加载内核&lt;strong&gt;之前&lt;/strong&gt;需要解锁设备，那么评估系统健康状况的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 策略自然就不能对将要使用的内核、命令行或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 进行断言。这些内容将在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 设备打开后加载。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 的使用为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt; 提供了一个替代架构，它可以与任何遵循 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLS&lt;/code&gt; 的引导加载器正常工作（请记住，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 有一个支持它的补丁，所以它并没有被排除在外），并提供了在解锁设备前进行完整测量引导验证的机会。&lt;/p&gt;

&lt;p&gt;不同之处在于，内核和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 将被放置在未加密的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP&lt;/code&gt; 中，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysroot&lt;/code&gt; 的解锁将在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptsetup&lt;/code&gt; 提供的不同选项完成。目前，它可以使用普通密码、带授权策略的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt;（用户必须输入 PIN）或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥设备解锁设备。我们需要在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/crypttab&lt;/code&gt; 文件中描述&lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/latest/crypttab.html&quot;&gt;解锁机制&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcr-oracle&lt;/code&gt; 已被扩展用于支持创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 可以理解的授权策略。这些策略存储在一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 文件中，该文件包含多个预测，每个预测都说明了所涉及的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 策略哈希值、公钥指纹和策略签名。这些信息与公钥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PEM&lt;/code&gt; 文件一起，构成了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptsetup&lt;/code&gt; 使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 解封 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 密钥所需的全部数据。&lt;/p&gt;

&lt;p&gt;用于签署策略的 &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_numbers&quot;&gt;RSA&lt;/a&gt; 2048 密钥可以用 &lt;a href=&quot;https://www.openssl.org/&quot;&gt;openssl&lt;/a&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcr-oracle&lt;/code&gt; 创建。需要注意的是：如果私钥泄露，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 所能提供的预期安全性就完了。幸运的是，这种情况下的解决方案很简单：生成一个新密钥，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptenroll&lt;/code&gt; 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 密钥槽中重新注册密钥，然后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdbootutil&lt;/code&gt; 为每个启动项重新生成预测值。是的……我们将在 “&lt;a href=&quot;https://en.opensuse.org/Systemd-fde&quot;&gt;systemd-fde&lt;/a&gt;“维基页面中记录所有过程，并提供更好的工具，但请相信我，这确实是个低成本的操作。&lt;/p&gt;

&lt;p&gt;openSUSE 提供了一个名为 &lt;a href=&quot;http://download.opensuse.org/tumbleweed/appliances/openSUSE-MicroOS.x86_64-kvm-and-xen-sdboot.qcow2&quot;&gt;kvm-and-xen-sdboot&lt;/a&gt; 的 &lt;a href=&quot;https://build.opensuse.org/package/show/devel:microos:images/openSUSE-MicroOS&quot;&gt;MicroOS 镜像&lt;/a&gt;，展示了所有这些是如何工作的。该镜像包含一些已集成的工具和其他一些新工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;： 使用引导加载器代替默认 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdbootutil&lt;/code&gt;： 同步系统引导项的辅助脚本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcr-oracle&lt;/code&gt;： 预测下一次启动的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值，并为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 创建授权策略&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disk-encryption-tool&lt;/code&gt;： 在第一次启动时加密 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysroot&lt;/code&gt; 所在的设备&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dracut-pcr-signature&lt;/code&gt;：将预测值从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP&lt;/code&gt; 加载到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dracut&lt;/code&gt; 模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些工具旨在为这种新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt; 架构协同工作。以下是所有连接方式的简要描述。&lt;/p&gt;

&lt;p&gt;获得新的 MicroOS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qcow2&lt;/code&gt; 镜像并设置好虚拟机后，我们就可以开始启动程序了。如果虚拟机有虚拟 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 设备，它将开始测量执行的代码和数据，并扩展相应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt;。一旦进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;，它将为该会话找到正确的启动项，并从中读取相应的内核和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;此时镜像尚未加密。在第一次启动时使用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 中，将调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disk-encryption-tool&lt;/code&gt; 脚本。通过一些启发式方法，它将找到属于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysroot&lt;/code&gt;（系统所在位置）的分区，并调整其大小，为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 标头预留 32MB。之后，它将使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cryptsetup&lt;/code&gt; 提供的所有神奇功能，使用本地生成的密码重新加密设备。截至今天，该密码将与最后提供给用户的恢复密钥相对应，用户应注意并妥善保管。&lt;/p&gt;

&lt;p&gt;重新加密后，系统的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/crypttab&lt;/code&gt; 将被更新，以告知该设备现已加密，以后应使用不同的工具进行管理。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 结束后，我们切换到新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysroot&lt;/code&gt;，现在它终于位于加密设备中了。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disk-encryption-tool&lt;/code&gt; 脚本已经完成了它的主要工作，但它还为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jeos-firstboot&lt;/code&gt; 安装了两个模块，这些模块将在系统首次启动时执行！&lt;/p&gt;

&lt;p&gt;第一个模块，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enroll&lt;/code&gt;，将检测是否插入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt;。如果有，它将弹出一个对话框，询问你想用什么来解锁系统。第二个模块会询问用户是否将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; 密码作为新密钥注册到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 标头中，并显示之前生成的恢复密钥。&lt;/p&gt;

&lt;p&gt;从目前来看，两种密钥都注册并不可取。正如我们前面所述，如果我们使用的是笔记本电脑或台式机，并且我们希望通过自己拥有的令牌证明来解锁加密设备，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥将更有意义。这是一个交互过程。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 则更适用于我们不想与系统交互的情况，只有在我们能确定系统健康（启动链中未发生篡改）的情况下，我们才希望自动解锁设备。&lt;/p&gt;

&lt;p&gt;如果我们注册了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptenroll&lt;/code&gt; 将被调用，并要求我们按两下按钮，安装过程就结束了。下一次启动时，我们需要出示密钥，如果密钥丢失，则会询问恢复密码。&lt;/p&gt;

&lt;p&gt;如果我们注册了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 设备，新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSA&lt;/code&gt; 2048 密钥就会生成并存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd&lt;/code&gt; 中（公钥和私钥部分），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptenroll&lt;/code&gt; 将用于注册公钥和注释用于封存 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 密钥的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt;。默认情况下，我们将使用 0、2、4、7 和 9。具体含义可参阅&lt;a href=&quot;https://uapi-group.org/specifications/specs/linux_tpm_pcr_registry/&quot;&gt;此处&lt;/a&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 0 和 2 将测量所有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UEFI&lt;/code&gt; 固件代码。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 4 将测量引导加载器（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;）和内核（也是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UEFI&lt;/code&gt; 二进制文件）。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 7 将注册所有安全启动证书，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 9 将被内核用于测量命令行和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这几乎涵盖了所有可能有意义的内容，但用户有权最终决定测量什么。原因是预测是在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdbootutil&lt;/code&gt; 中完成的，记住，每次系统发生变化（更新、删除软件包、快照管理等）后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdbootutil&lt;/code&gt; 都会自动执行，而且该工具只针对在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 标头中注册的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 进行预测。&lt;/p&gt;

&lt;p&gt;无论选择哪种解锁机制，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/crypttab&lt;/code&gt; 文件都将根据这一选择进行更新，并生成一个新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 文件，其中包含下次启动时需要的信息。&lt;/p&gt;

&lt;p&gt;最后，最后一个组件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dracut-pcr-signature&lt;/code&gt; 将负责在后续启动过程中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptsetup&lt;/code&gt; 解锁所需的所有信息都将&lt;strong&gt;即时&lt;/strong&gt;出现在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 中。需要注意的是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 需要包含策略和密钥的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 文件，但这些信息无法包含在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 中！当我们对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 进行预测并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 的哈希值进行扩展后，我们就不能再接触 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initrd&lt;/code&gt; 了，因为这会产生新的哈希值，并自动使预测失效。&lt;/p&gt;

&lt;p&gt;该 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dracut&lt;/code&gt; 模块将在任何加密设备的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptsetup&lt;/code&gt; 生成器启动之前执行，并在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESP&lt;/code&gt; 分区中搜索包含当前启动的所有有效预测的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tpm2-pcr-signature.json&lt;/code&gt; 文件。一旦该文件就位，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-crypsetup&lt;/code&gt; 就能断言当前状态下的设备就是预期的设备，启动过程就能继续直至结束。&lt;/p&gt;

&lt;h3 id=&quot;未来&quot;&gt;未来&lt;/h3&gt;

&lt;p&gt;如上，它提供了一个更简单的架构，并将一些组件放置在正确的位置。这将对下一阶段的工作大有帮助，因为我们还想在与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt; 有关的分布式系统中做一些其他事情。&lt;/p&gt;

&lt;p&gt;一种非常清晰的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disk-encryption-tool&lt;/code&gt; 工具在基于镜像的安装之外的使用有限。该代码的一部分应该位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YaST&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Agama&lt;/code&gt; 中。安装程序已经在创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 设备，因此以适合我们的方式扩展它应该很“容易”。&lt;/p&gt;

&lt;p&gt;理想情况下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jeos-firstboot&lt;/code&gt; 模块也应安装在安装程序中，但不知何故，它们在这里也有意义。无论如何，这两个模块的功能不应分开，而应合并。&lt;/p&gt;

&lt;p&gt;加密工具从一开始就在做正确的事情：主密钥和所有用户密钥都是在安装时生成的，但一个可能的改进是稍后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 工具生成恢复密钥。这只是一个小细节，但将系统密钥与用户密钥分开可以简化架构。&lt;/p&gt;

&lt;p&gt;另一个需要改进的方面是，用户可能希望同时使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥。例如，默认情况下使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt;，如果阶段发生变化，导致预测失败（或检测到安全漏洞），用户可以将解锁委托给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIDO2&lt;/code&gt; 密钥，而不是使用密码。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdbootutil&lt;/code&gt; 脚本包含了许多 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 中也应具备的功能。与上游合作将使这个工具随着时间的推移而过时，这将是一个更好的消息。&lt;/p&gt;

&lt;p&gt;我们可以帮助 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 进行的另一项改进是改进对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPM2&lt;/code&gt; 拒绝解封 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LUKS2&lt;/code&gt; 密钥原因的诊断。目前，我们只有一条普通的失败消息，却没有报告是哪个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 内部的哪个测量组件报告了与预测值不同的哈希值。这将大大有助于了解出错的原因。是否更改了引导加载器？还是固件出了问题？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pcr-oracle&lt;/code&gt; 是预测下一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值的非常好的工具。它很容易扩展，以解析日志中与整个测量启动过程相关的新事件，包括内核、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 12 上的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt; 扩展，或生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 所需的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 文档。新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd&lt;/code&gt; 255（撰写本文时已发布一周）包含一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-pcrlock&lt;/code&gt; 的类似工具，它可以帮助我们提供所需的改进诊断。对该工具的预测评估也将很快完成。&lt;/p&gt;

&lt;p&gt;目前，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLS&lt;/code&gt; 中的 Type#1 和 Type#2 条目并非同构。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UKI&lt;/code&gt; 格式的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EFI&lt;/code&gt; 文件中，有些部分在文本表示中并不存在。也许我们将来会决定使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UKI&lt;/code&gt;，也许不会。因此，一个很好的改进就是帮助实现这种统一，，这将提供一种标准方法来分割 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 文件并将预测与每个引导加载程序条目相关联。&lt;/p&gt;

&lt;p&gt;目前，生成和注册一个新密钥或选择一组不同的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 都需要人工操作。我们可以扩展现有工具，以帮助完成这些过程，或者提供更好的文档。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FDE&lt;/code&gt; 的新方法并不是要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 排除在外。它提供了一个使用不同引导加载器的机会，这些引导加载器都遵循 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLS&lt;/code&gt;。验证经过适当修补的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRUB2&lt;/code&gt; 是否可以处理所有这些问题的工作仍然有待完成。&lt;/p&gt;

&lt;p&gt;此外，另一个需要验证和改进的问题是安装多个加密磁盘。原则上，设计和代码都支持这种情况（即使每个卷的 PCR 寄存器不同）。&lt;/p&gt;

&lt;p&gt;最后，我们应该重新考虑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UKI&lt;/code&gt; 是否对 openSUSE 有意义。如果我们朝这个方向发展，用于签署策略的私钥将保存在 &lt;a href=&quot;https://build.opensuse.org/&quot;&gt;OBS&lt;/a&gt; 中，这些策略也将在构建服务中生成，并使用一组不同的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PCR&lt;/code&gt; 值。&lt;/p&gt;

&lt;p&gt;无论如何，我们还有大量工作要做。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2023/12/20/systemd-fde/&quot;&gt;Systemd-boot and Full Disk Encryption in Tumbleweed and MicroOS&lt;/a&gt;，作者：Alberto Planas&lt;/p&gt;

</content:encoded>
    </item>

    <item>
      <guid>/%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/2023/12/08/weekly-update.html</guid>
      <title>LLVM、Sudo 和 GCC 在 Tumbleweed 中更新</title>
      <pubDate>Fri, 08 Dec 2023 23:30:00 +0000</pubDate>
      <link>/%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/2023/12/08/weekly-update.html</link>
      <author>Poplar at twilight</author>
      <description>openSUSE 本周持续发布快照，为用户带来最新的软件更新。 除了标题中强调的更新之外，MariaDB、GTK 和 gnome-software 也是本周推出的一系列更新的一部分。 快照 20231206 仅更新了两个包。中国农历日期库 lunar-date 更新至新的主要版本，3.0.1；它引入了本地化界面并更改了项目选项名称。lunar-date 还将其许可证更新为 LGPL-2.1。[rubygem-rubocop] 1.58.0 包的更新解决了各种样式的漏报等问题，提高了部分代码质量，并确保对不同代码模式的自动更正更加准确。ruby​​gem-rubocop 1.58.0 也在适用于 ARM 的 Tumbleweed 快照 20231206 中更新。 快照 20231205 更新了 gnome-shell 45.2。gnome-shell 解决了多个性能问题，改进了 GNOME 的应用程序搜索功能，并修复了与屏幕键盘相关的错误。该更新改进了高对比度样式，修复了 tablet ring 和 strip mapping，解决了一些崩溃问题并更新了翻译。gnome-maps 45.2 修复了不必要地重新加载行程查询的错误。fwupd 1.9.10 更新除了修正错误外，还增强了多项功能。值得注意的新增内容是对 not_hardware 要求和 loongarch64 微处理器的支持。此更新改进了 USB 声明重试计数配置、强制执行版本要求、隐藏调试日志中的敏感信息，并改进了特定于设备的功能，例如 Wacom USB 设备模拟。sudo 1.9.15p2...</description>
      <content:encoded>&lt;p&gt;&lt;a href=&quot;https://get.opensuse.org/tumbleweed/&quot;&gt;openSUSE&lt;/a&gt; 本周持续发布快照，为用户带来最新的软件更新。&lt;/p&gt;

&lt;p&gt;除了标题中强调的更新之外，&lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt;、&lt;a href=&quot;https://www.gtk.org/&quot;&gt;GTK&lt;/a&gt; 和 &lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-software&quot;&gt;gnome-software&lt;/a&gt; 也是本周推出的一系列更新的一部分。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/WZ2H7OOQFO3IQCZIOXZYBOFMI5F7YW5M/&quot;&gt;20231206&lt;/a&gt; 仅更新了两个包。中国农历日期库 &lt;a href=&quot;https://github.com/yetist/lunar-date&quot;&gt;lunar-date&lt;/a&gt; 更新至新的主要版本，3.0.1；它引入了本地化界面并更改了项目选项名称。lunar-date 还将其许可证更新为 &lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&quot;&gt;LGPL-2.1&lt;/a&gt;。[rubygem-rubocop] 1.58.0 包的更新解决了各种样式的漏报等问题，提高了部分代码质量，并确保对不同代码模式的自动更正更加准确。&lt;a href=&quot;https://rubygems.org/gems/rubocop/versions/1.58.0?locale=en&quot;&gt;ruby​​gem-rubocop&lt;/a&gt; 1.58.0 也在&lt;a href=&quot;https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/KE3W6G52JOKMQX5LRTK3QAHPXO265EY3/&quot;&gt;适用于 ARM 的 Tumbleweed 快照 20231206&lt;/a&gt; 中更新。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/YZ2Z4INOG44QZIYHZMFNVKSHTQPV5YJW/&quot;&gt;20231205&lt;/a&gt; 更新了 &lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-shell&quot;&gt;gnome-shell&lt;/a&gt; 45.2。gnome-shell 解决了多个性能问题，改进了 &lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME&lt;/a&gt; 的应用程序搜索功能，并修复了与屏幕键盘相关的错误。该更新改进了高对比度样式，修复了 tablet ring 和 strip mapping，解决了一些崩溃问题并更新了翻译。&lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-maps&quot;&gt;gnome-maps&lt;/a&gt; 45.2 修复了不必要地重新加载行程查询的错误。&lt;a href=&quot;https://fwupd.org/&quot;&gt;fwupd&lt;/a&gt; 1.9.10 更新除了修正错误外，还增强了多项功能。值得注意的新增内容是对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not_hardware&lt;/code&gt; 要求和 &lt;a href=&quot;https://en.wikipedia.org/wiki/Loongson&quot;&gt;loongarch64&lt;/a&gt; 微处理器的支持。此更新改进了 USB 声明重试计数配置、强制执行版本要求、隐藏调试日志中的敏感信息，并改进了特定于设备的功能，例如 &lt;a href=&quot;https://en.wikipedia.org/wiki/Wacom&quot;&gt;Wacom&lt;/a&gt; USB 设备模拟。&lt;a href=&quot;https://www.sudo.ws/&quot;&gt;sudo&lt;/a&gt; 1.9.15p2 的更新解决了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l command&lt;/code&gt; 警告消息，增强了针对 &lt;a href=&quot;https://en.wikipedia.org/wiki/Row_hammer&quot;&gt;rowhammer&lt;/a&gt; 攻击的安全性，并对日志消息进行了改进，以便更好地用户理解和系统安全。用于控制系统范围权限的应用程序开发工具包 &lt;a href=&quot;https://gitlab.freedesktop.org/polkit/polkit&quot;&gt;polkit&lt;/a&gt; 的 123 版本更新，引入了增强的安全措施，例如对配置文件的更深入限制、&lt;a href=&quot;https://freedesktop.org/wiki/Software/systemd/&quot;&gt;systemd&lt;/a&gt; 下守护进程的所有者限制，并改进了 systemd 单元内的沙箱，旨在更好地系统安全。&lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;sqlite3&lt;/a&gt; 3.44.2 更新纠正了一些问题，如 &lt;a href=&quot;https://en.wikipedia.org/wiki/Command-line_interface&quot;&gt;CLI&lt;/a&gt; 错误、内部测试中发现的全文搜索（FTS5）问题以及使用 &lt;a href=&quot;https://gcc.gnu.org/&quot;&gt;GCC&lt;/a&gt; 16 调试构建时出现的编译器警告。快照更新了 &lt;a href=&quot;https://github.com/vcrhonek/hwdata&quot;&gt;hwdata&lt;/a&gt; 0.377、&lt;a href=&quot;https://en.wikipedia.org/wiki/Ncurses&quot;&gt;ncurses&lt;/a&gt; 6.4.20231202 和更多其他的包。&lt;a href=&quot;https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/FT5LBZ5TCBG7EJACWCQTJ7KM2IBN2LHA/&quot;&gt;适用于 ARM 的 Tumbleweed 快照 20231205&lt;/a&gt; 更新了许多相同的软件包。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/3FNXUM7I2UZVQNJVDHUW6YOCUVVZIB6T/&quot;&gt;20231204&lt;/a&gt; 中更新了多个 &lt;a href=&quot;https://www.qt.io/product/qt6&quot;&gt;Qt 6&lt;/a&gt; 子包。&lt;a href=&quot;https://www.qt.io/&quot;&gt;qt6-base&lt;/a&gt; 6.6.1 版本修复了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QMenuBar&lt;/code&gt; 功能限制，并更正了与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QFont&lt;/code&gt; 功能 &lt;a href=&quot;https://en.wikipedia.org/wiki/API&quot;&gt;API&lt;/a&gt; 相关的错误。&lt;a href=&quot;https://www.qt.io/&quot;&gt;qt6-wayland&lt;/a&gt; 6.6.1 的更新修复了与 texture orphanage 相关的崩溃问题，并修复了 &lt;a href=&quot;https://wayland.freedesktop.org/&quot;&gt;Wayland&lt;/a&gt; 显示的拖放问题。&lt;a href=&quot;https://github.com/ibus/ibus&quot;&gt;ibus&lt;/a&gt; 1.5.29 更新增强了持续集成（CI），为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostProcessKeyEvent&lt;/code&gt; 添加了信号，防止输入法提交制表符，并修复了按键键入、表情符号和 Unicode 问题。用于访问和修改虚拟机磁盘映像的 &lt;a href=&quot;https://www.libguestfs.org/&quot;&gt;libguestfs&lt;/a&gt; 1.51.8 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virt-customize&lt;/code&gt; 添加了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--chown&lt;/code&gt; 选项和新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tar-in&lt;/code&gt; 操作。快照中还更新了其他一些软件包。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/IAJ2F5ZKXLLGKBL5227TGVRTMHHM3DBD/&quot;&gt;20231203&lt;/a&gt; 更新了编译器和工具链包 &lt;a href=&quot;https://llvm.org/&quot;&gt;llvm17&lt;/a&gt; 17.0.6。llvm17 的更新包括变基（rebase）补丁、调整版本化可执行文件以提供更好的支持，以及使用类似于其他二进制文件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update-alternatives&lt;/code&gt; 方法对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-cpp&lt;/code&gt; 进行标准化管理，以实现更流畅的操作。&lt;a href=&quot;https://mariadb.org/&quot;&gt;mariadb&lt;/a&gt; 11.1.2 版本包括与不需要的二进制位置、ppc64le 上的内存限制和跳过的测试相关的多个修复。中国农历库 &lt;a href=&quot;https://github.com/yetist/lunar-calendar&quot;&gt;lunar-calendar&lt;/a&gt; 3.0.1 的日历小部件的更新涉及对许可证的修改，从以前的许可条款过渡到 &lt;a href=&quot;https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html&quot;&gt;LGPL-2.1&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/5FTRUNXH23ZWKX37LVEZIWTBB5O3W4W5/&quot;&gt;20231202&lt;/a&gt; 更新了 &lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-software&quot;&gt;gno​​me-software&lt;/a&gt;。根据变更日志，gno​​me-software 45.2 的更新主要涉及多种语言的翻译。较旧的 &lt;a href=&quot;https://gcc.gnu.org/&quot;&gt;GCC&lt;/a&gt; 有一个 &lt;a href=&quot;https://github.com/git&quot;&gt;git&lt;/a&gt; 更新，包含 &lt;a href=&quot;https://gcc.gnu.org/&quot;&gt;gcc13&lt;/a&gt; 13.2.1+git8109。它修复了在 &lt;a href=&quot;https://en.wikipedia.org/wiki/P6_(microarchitecture)&quot;&gt;i686&lt;/a&gt; 系统上构建 &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt; 的问题，并实现了与 &lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; 依赖性相关的更改。&lt;a href=&quot;https://inkscape.org/&quot;&gt;inkscape&lt;/a&gt; 1.3.2 的更新解决了数据丢失问题，并纠正了与某些形状和 3D 框相关的保存错误。用于组织个人数据和日程安排的应用程序 &lt;a href=&quot;https://wiki.gnome.org/Apps/Evolution&quot;&gt;evolution&lt;/a&gt; 更新至 3.50.2 版本，并修复了崩溃和&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_leak&quot;&gt;内存泄漏&lt;/a&gt;；它还修复了搜索功能的问题。&lt;a href=&quot;https://www.gtk.org/&quot;&gt;gtk4&lt;/a&gt; 4.12.4 更新改进了可访问性名称计算，修复了内存格式表错误，更新了翻译并进行了一些额外的改进。&lt;/p&gt;

&lt;p&gt;本周的第一个快照是 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/K2BJRCMU6NM3B5ZQTSDJ5UV7LM6RUMOT/&quot;&gt;20231201&lt;/a&gt;。&lt;a href=&quot;https://www.perl.org/&quot;&gt;perl&lt;/a&gt; 5.38.2 的更新修复了两个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures&quot;&gt;CVE&lt;/a&gt;。其中之一是 &lt;a href=&quot;https://www.suse.com/security/cve/CVE-2023-47038.html&quot;&gt;CVE-2023-47038&lt;/a&gt;，当 Perl 编译精心设计的正则表达式时会发生这种情况。另一个是 &lt;a href=&quot;https://www.suse.com/security/cve/CVE-2023-47039.html&quot;&gt;CVE-2023-47039&lt;/a&gt;。&lt;a href=&quot;https://github.com/openSUSE/snapper&quot;&gt;Snapper&lt;/a&gt; 0.10.7 解决了与基于&lt;a href=&quot;https://en.wikipedia.org/wiki/Logical_volume_management&quot;&gt;逻辑卷管理器&lt;/a&gt;的配置和接受字符串集合的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SystemCmd&lt;/code&gt; 的 diff 相关的问题。&lt;a href=&quot;https://git.kernel.org/pub/scm/network/iproute2/iproute2.git&quot;&gt;iproute2&lt;/a&gt; 6.6 的更新删除了一些功能，并在网桥中添加了备份支持以及对安全协议套件的调整。快照中要更新的其他软件包有 &lt;a href=&quot;https://mirrors.edge.kernel.org/pub/software/network/ethtool/&quot;&gt;ethtool&lt;/a&gt; 6.6、&lt;a href=&quot;https://www.gnupg.org/related_software/gpgme/&quot;&gt;gpgme&lt;/a&gt; 1.23.2 等。&lt;/p&gt;

&lt;p&gt;本周另外两个适用于 Arm 的 Tumbleweed 快照是 &lt;a href=&quot;https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/HVWNVYJO2SATG4QZLTYXMVQOEV4RYFYB/&quot;&gt;20231204&lt;/a&gt; 和 &lt;a href=&quot;https://lists.opensuse.org/archives/list/arm@lists.opensuse.org/thread/2GRYHK42UHIDDWFE7NQ6PTHUMXT3KTBT/&quot;&gt;20231203&lt;/a&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2023/12/08/llvm-sudo-gcc-packages-up-in-tw/&quot;&gt;Tumbleweed gets LLVM, Sudo, GCC Updates&lt;/a&gt;，作者：Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2023/12/05/opensuse-logo.html</guid>
      <title>openSUSE 徽标重塑的过渡历程</title>
      <pubDate>Tue, 05 Dec 2023 23:30:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2023/12/05/opensuse-logo.html</link>
      <author>Poplar at twilight</author>
      <description>随着 openSUSE 社区准备逐步启用新的项目徽标，开源世界正在经历一场激动人心的变革。 尽管投票数超过 5000 张的竞赛尚未结束，但以下信息有助于人们了解重塑项目徽标的原因，以及徽标竞赛结束后 openSUSE 品牌的下一步计划。 人见人爱的变色龙（Chameleon）被热情地称为 “Geeko”，它于 2005 年项目启动时首次出现，2007 年为品牌修改字体时略有改动。 openSUSE 项目从 2003 年开始采用 SUSE 徽标，但徽标下方的文字有所不同，这标志着由社区主导的项目进入了品牌联合时代。SUSE 多年来不断刷新其品牌，2020 年发布的最新徽标与 openSUSE 的徽标完全不同。然而，SUSE 和 openSUSE 的品牌经常会让人混淆，因为他们不了解开源公司 SUSE 和开源社区项目 openSUSE 之间的关系。 为了减少这种交叉品牌的混淆，openSUSE 社区希望创建一个独特的品牌标识，但又能帮助区分公司和社区项目，因此举办了以变色龙为灵感的徽标设计大赛。不同的徽标是帮助人们识别两个品牌之间区别的第一步，应该可以缓解社区项目中已经出现或可能出现的问题，避免这些问题渗入公司的品牌识别中。 新徽标旨在为 openSUSE 创建一个独特的标识，使其与 SUSE 有更清晰的区分。新标识有望与 SUSE 的品牌标识区分开来，并与其发行版的标识风格相似。 徽标竞赛结束后的下一步工作是在 12 月 12 日 14:30（世界协调时）的 openSUSE 社区会议上讨论获奖作品。欢迎大家参加并讨论结果以及项目应如何推进设计。 新徽标公布后，旧的 Geeko 徽标将在贴纸和其他营销材料中与新徽标同时使用，以过渡到新徽标。在使用旧徽标的同时引入新徽标，有助于用户逐步适应新标识。...</description>
      <content:encoded>&lt;p&gt;随着 &lt;a href=&quot;https://www.opensuse.org/&quot;&gt;openSUSE&lt;/a&gt; 社区准备逐步启用新的项目徽标，开源世界正在经历一场激动人心的变革。&lt;/p&gt;

&lt;p&gt;尽管投票数超过 5000 张的竞赛尚未结束，但以下信息有助于人们了解重塑项目徽标的原因，以及徽标竞赛结束后 openSUSE 品牌的下一步计划。&lt;/p&gt;

&lt;p&gt;人见人爱的变色龙（Chameleon）被热情地称为 “Geeko”，它于 2005 年项目启动时首次出现，2007 年为品牌修改字体时略有改动。&lt;/p&gt;

&lt;p&gt;openSUSE 项目从 2003 年开始采用 SUSE 徽标，但徽标下方的文字有所不同，这标志着由社区主导的项目进入了品牌联合时代。&lt;a href=&quot;https://en.opensuse.org/openSUSE:Project_logo_change_vote&quot;&gt;SUSE 多年来不断刷新其品牌&lt;/a&gt;，2020 年发布的最新徽标与 openSUSE 的徽标完全不同。然而，SUSE 和 openSUSE 的品牌经常会让人混淆，因为他们不了解开源公司 SUSE 和开源社区项目 openSUSE 之间的关系。&lt;/p&gt;

&lt;p&gt;为了减少这种交叉品牌的混淆，openSUSE 社区希望创建一个独特的品牌标识，但又能帮助区分公司和社区项目，因此举办了以变色龙为灵感的&lt;a href=&quot;https://suse.org.cn/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2023/11/25/vote.html&quot;&gt;徽标设计大赛&lt;/a&gt;。不同的徽标是帮助人们识别两个品牌之间区别的第一步，应该可以缓解社区项目中已经出现或可能出现的问题，避免这些问题渗入公司的品牌识别中。&lt;/p&gt;

&lt;p&gt;新徽标旨在为 openSUSE 创建一个独特的标识，使其与 SUSE 有更清晰的区分。新标识有望与 SUSE 的品牌标识区分开来，并与其发行版的标识风格相似。&lt;/p&gt;

&lt;p&gt;徽标竞赛结束后的下一步工作是在 12 月 12 日 14:30（世界协调时）的 &lt;a href=&quot;https://etherpad.opensuse.org/p/weeklymeeting&quot;&gt;openSUSE 社区会议&lt;/a&gt;上讨论获奖作品。欢迎大家参加并讨论结果以及项目应如何推进设计。&lt;/p&gt;

&lt;p&gt;新徽标公布后，旧的 Geeko 徽标将在贴纸和其他营销材料中与新徽标同时使用，以过渡到新徽标。在使用旧徽标的同时引入新徽标，有助于用户逐步适应新标识。&lt;/p&gt;

&lt;p&gt;在过渡期间，社区成员可能会在桌布、服装和其他服饰上看到新标识，这将使这些物品成为独一无二的收藏品。社区成员可以通过参加开源活动来宣传新徽标，并在&lt;a href=&quot;https://en.opensuse.org/openSUSE:Organising_a_booth#Events&quot;&gt;多个活动&lt;/a&gt;中&lt;a href=&quot;https://en.opensuse.org/openSUSE:Organising_a_booth&quot;&gt;组织一个展台&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;社区中对新选定的徽标有反馈意见的人可以向 openSUSE 项目的&lt;a href=&quot;https://lists.opensuse.org/archives/list/artwork@lists.opensuse.org/&quot;&gt;艺术品邮件列表&lt;/a&gt;发送电子邮件，或在 openSUSE 项目营销团队的 &lt;a href=&quot;https://t.me/openSUSE_Marketing&quot;&gt;Telegram 群组&lt;/a&gt;中进行讨论。&lt;/p&gt;

&lt;p&gt;负责品牌更改和维护的人员对任何更改都有发言权。最终的品牌决定将由负责实施的项目成员做出，但本次徽标竞赛的结果将为整个品牌识别项目提供一个表达意见的平台。&lt;/p&gt;

&lt;p&gt;立即前往 &lt;a href=&quot;https://survey.opensuse.org/&quot;&gt;Survey.opensuse.org&lt;/a&gt; 投票。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2023/12/05/journey-of-os-rebrand/&quot;&gt;The Transitional Journey of openSUSE’s Logo Rebranding&lt;/a&gt;，作者：Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2023/12/05/opensuse-bar.html</guid>
      <title>openSUSE 社区计划举办虚拟酒吧周年纪念活动</title>
      <pubDate>Tue, 05 Dec 2023 23:30:00 +0000</pubDate>
      <link>/%E7%A4%BE%E5%8C%BA%E6%96%B0%E9%97%BB/2023/12/05/opensuse-bar.html</link>
      <author>Poplar at twilight</author>
      <description>这一年来，社区的联系和互动方式也发生了变化。

在人们对家中每一平方英寸/厘米都了如指掌的时代，openSUSE 的两位成员创立了一种创新的方式，即通过虚拟酒吧来增进社区成员之间的友谊和参与度。

最初的想法是为了消除距离感，为爱好者创造一个温馨的空间，如今这个想法已经发展成为一个为期三年的传统，并迎来了它的周年纪念。

2020 年，当全世界都在探索远程交互这一未知领域时，openSUSE 社区迈出了大胆的一步，在 meet.opensuse.org/bar 上推出了虚拟酒吧。

虚拟酒吧的目的是模仿实体酒吧的热闹氛围，让人们聚集在一起，聊天、分享知识和故事，最重要的是，让他们因对 openSUSE 和 Linux 的热情而紧密联系在一起。它甚至还有一个 Telegram 群组，让人们知道酒吧何时开放。

自 2020 年 12 月 19 日成立以来，这个虚拟酒吧一直是经验丰富的老手和新手的聚集地。平台上的人们分享见解、解决技术问题、讨论 Linux 世界的最新发展，并通过他们选择的饮料建立超越地域界限的持久联系。

openSUSE 虚拟酒吧的成功不仅在于其技术基础设施，还在于其充满活力的社区。

openSUSE 社区将于世界协调时 2023 年 12 月 19 日中午开始庆祝成立三周年。

虚拟酒吧已不仅仅是技术讨论的场所，它已发展成为一个支持网络，在这里成员们可以找到鼓励、指导和归属感。尤其是新成员，他们在这个热情的环境中找到了慰藉，并积极参与到 openSUSE 社区中来。

举起您的虚拟酒杯，与 openSUSE 社区一起在虚拟酒吧纪念三年来的友谊、研习和同事情谊。



原文：openSUSE Community Plans Virtual Bar Anniversary，作者：Douglas DeMaio
</description>
      <content:encoded>&lt;p&gt;这一年来，社区的联系和互动方式也发生了变化。&lt;/p&gt;

&lt;p&gt;在人们对家中每一平方英寸/厘米都了如指掌的时代，&lt;a href=&quot;https://youtu.be/YmnawYltDSQ?si=ioXDFhTtpgeN8IEI&quot;&gt;openSUSE 的两位成员&lt;/a&gt;创立了一种创新的方式，即通过&lt;a href=&quot;https://youtu.be/YmnawYltDSQ?si=ioXDFhTtpgeN8IEI&quot;&gt;虚拟酒吧&lt;/a&gt;来增进社区成员之间的友谊和参与度。&lt;/p&gt;

&lt;p&gt;最初的想法是为了消除距离感，为爱好者创造一个温馨的空间，如今这个想法已经发展成为一个为期三年的传统，并迎来了它的周年纪念。&lt;/p&gt;

&lt;p&gt;2020 年，当全世界都在探索远程交互这一未知领域时，openSUSE 社区迈出了大胆的一步，在 &lt;a href=&quot;https://meet.opensuse.org/bar&quot;&gt;meet.opensuse.org/bar&lt;/a&gt; 上推出了虚拟酒吧。&lt;/p&gt;

&lt;p&gt;虚拟酒吧的目的是模仿实体酒吧的热闹氛围，让人们聚集在一起，聊天、分享知识和故事，最重要的是，让他们因对 openSUSE 和 Linux 的热情而紧密联系在一起。它甚至还有一个 &lt;a href=&quot;https://t.me/opensuse_bar_group&quot;&gt;Telegram 群组&lt;/a&gt;，让人们知道酒吧何时开放。&lt;/p&gt;

&lt;p&gt;自 2020 年 12 月 19 日成立以来，这个虚拟酒吧一直是经验丰富的老手和新手的聚集地。平台上的人们分享见解、解决技术问题、讨论 Linux 世界的最新发展，并通过他们选择的饮料建立超越地域界限的持久联系。&lt;/p&gt;

&lt;p&gt;openSUSE 虚拟酒吧的成功不仅在于其技术基础设施，还在于其充满活力的社区。&lt;/p&gt;

&lt;p&gt;openSUSE 社区将于世界协调时 2023 年 12 月 19 日中午开始庆祝成立三周年。&lt;/p&gt;

&lt;p&gt;虚拟酒吧已不仅仅是技术讨论的场所，它已发展成为一个支持网络，在这里成员们可以找到鼓励、指导和归属感。尤其是新成员，他们在这个热情的环境中找到了慰藉，并积极参与到 openSUSE 社区中来。&lt;/p&gt;

&lt;p&gt;举起您的虚拟酒杯，与 openSUSE 社区一起在&lt;a href=&quot;https://youtu.be/YmnawYltDSQ?si=ioXDFhTtpgeN8IEI&quot;&gt;虚拟酒吧&lt;/a&gt;纪念三年来的友谊、研习和同事情谊。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2023/12/04/community-plans-virtual-bar-anniversary/&quot;&gt;openSUSE Community Plans Virtual Bar Anniversary&lt;/a&gt;，作者：Douglas DeMaio&lt;/p&gt;
</content:encoded>
    </item>

    <item>
      <guid>/%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/2023/11/30/weekly-update.html</guid>
      <title>PipeWire 和 Firefox 的大版本更新在 Tumbleweed 中发布</title>
      <pubDate>Thu, 30 Nov 2023 23:30:00 +0000</pubDate>
      <link>/%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/2023/11/30/weekly-update.html</link>
      <author>Poplar at twilight</author>
      <description>使用 OpenTUNA 的 openSUSE 用户应当得知 OpenTUNA 将于本月底停止服务，用户可参考下述链接切换至其他镜像站服务。 openSUSE:镜像 SDB:添加软件源 openSUSE - Mirrors Report openSUSE Tumbleweed 本周发布的快照为用户提供了多个软件包的主要版本更新。 快照 20231127 发布了适用于 Linux 的音视频包 PipeWire 的 1.0 版本（也被称为 “El Presidente”）更新，提供显著的增强功能和大量星宿，例如解决了缓冲区上传期间与 memfd 和 dma-buf 泄漏相关的内存管理问题。PipeWire 对影响中断请求的 ALSA 的时间报告进行了改进，从而减少了时间偏差。PipeWire 改进了文档和蓝牙编解码器，引入了 LC3 编解码器；LC3 是 SBC 编解码器的后继者。Mozilla Firefox 更新至新的大版本，处理了多个 CVE。Firefox 120.0 处理了多个安全漏洞，如可导致内存数据泄漏的 CVE-2023-6204、显示了内存损坏的证据，推测可被用于执行任意代码的 CVE-2023-6213。用于查询已连接的 USB 设备的 usbutils...</description>
      <content:encoded>&lt;p&gt;使用 &lt;a href=&quot;https://opentuna.cn/&quot;&gt;OpenTUNA&lt;/a&gt; 的 &lt;a href=&quot;https://get.opensuse.org/&quot;&gt;openSUSE&lt;/a&gt; 用户应当得知 &lt;a href=&quot;https://opentuna.cn/news/#opentuna-shutdown&quot;&gt;OpenTUNA 将于本月底停止服务&lt;/a&gt;，用户可参考下述链接切换至其他镜像站服务。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.opensuse.org/openSUSE:%E9%95%9C%E5%83%8F&quot;&gt;openSUSE:镜像&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.opensuse.org/SDB:%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E6%BA%90&quot;&gt;SDB:添加软件源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mirrors.opensuse.org&quot;&gt;openSUSE - Mirrors Report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;openSUSE &lt;a href=&quot;https://get.opensuse.org/tumbleweed/&quot;&gt;Tumbleweed&lt;/a&gt; 本周发布的快照为用户提供了多个软件包的主要版本更新。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/LPAYQ747GLQG6IWSUVMGVFOMUQV7HGSJ/&quot;&gt;20231127&lt;/a&gt; 发布了适用于 &lt;a href=&quot;https://www.kernel.org/&quot;&gt;Linux&lt;/a&gt; 的音视频包 &lt;a href=&quot;https://pipewire.org/&quot;&gt;PipeWire&lt;/a&gt; 的 1.0 版本（也被称为 “El Presidente”）更新，提供显著的增强功能和大量星宿，例如解决了缓冲区上传期间与 &lt;a href=&quot;https://github.com/bear-metal/memfd/blob/master/README.md&quot;&gt;memfd&lt;/a&gt; 和 &lt;a href=&quot;https://docs.kernel.org/driver-api/dma-buf.html&quot;&gt;dma-buf&lt;/a&gt; 泄漏相关的内存管理问题。PipeWire 对影响中断请求的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture&quot;&gt;ALSA&lt;/a&gt; 的时间报告进行了改进，从而减少了时间偏差。PipeWire 改进了文档和蓝牙编解码器，引入了 &lt;a href=&quot;https://en.wikipedia.org/wiki/LC3_(codec)&quot;&gt;LC3&lt;/a&gt; 编解码器；LC3 是 &lt;a href=&quot;https://en.wikipedia.org/wiki/SBC_(codec)&quot;&gt;SBC&lt;/a&gt; 编解码器的后继者。&lt;a href=&quot;https://www.mozilla.org/&quot;&gt;Mozilla Firefox&lt;/a&gt; 更新至新的大版本，处理了多个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures&quot;&gt;CVE&lt;/a&gt;。Firefox 120.0 处理了多个安全漏洞，如可导致内存数据泄漏的 &lt;a href=&quot;https://www.suse.com/security/cve/CVE-2023-6204.html&quot;&gt;CVE-2023-6204&lt;/a&gt;、显示了内存损坏的证据，推测可被用于执行任意代码的 &lt;a href=&quot;https://www.suse.com/security/cve/CVE-2023-6213.html&quot;&gt;CVE-2023-6213&lt;/a&gt;。用于查询已连接的 USB 设备的 &lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usbutils.git/&quot;&gt;usbutils&lt;/a&gt; 更新至 017 版本，解决诸如显示没有接口的设备条目之类的问题，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsusb.py&lt;/code&gt; 改进电源/唤醒显示。这些更改还确保更好地遵循系统 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdir&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includedir&lt;/code&gt; 以及其他各种优化。快照发布了 X 窗口管理器 &lt;a href=&quot;https://ice-wm.org/&quot;&gt;icewm&lt;/a&gt; 3.4.4。icewm 扩展了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icewmbg&lt;/code&gt; 中对 TIFF、WEBP、JXL、JP2、RAW、SVG 和 TGA 等图像格式支持。icewm 修复了数个崩溃问题，改进了主题的颜色解释，并提供了更稳定且功能丰富的用户体验。用于转换繁体中文、简体中文和日文汉字（Shinjitai）的 &lt;a href=&quot;https://pypi.org/project/OpenCC/&quot;&gt;OpenCC&lt;/a&gt; 更新至 1.1.7；它增加了对 &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; 3.12 和 &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; 20 的支持。快照中的其他一些软件包与 &lt;a href=&quot;https://transmissionbt.com/download&quot;&gt;Transmission&lt;/a&gt; 4.0.4 一起更新。Transmission 解决了向对等设备传输元数据、内存分配、文件重命名碰撞以及影响统计显示中数字四舍五入的本地化错误等问题。&lt;/p&gt;

&lt;p&gt;虽然快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/ZTO4XRBYWLL5SC54YAL2VLNESGTRFZRV/&quot;&gt;20231126&lt;/a&gt; 没有为新总统（“El Presidente”）提供红地毯待遇，但用户也需要关注出现在快照中的 &lt;a href=&quot;https://www.php.net/&quot;&gt;php8&lt;/a&gt; 8.2.13。php8 解决了 &lt;a href=&quot;https://www.php.net/manual/en/book.opcache.php&quot;&gt;Opcache&lt;/a&gt;、&lt;a href=&quot;https://www.openssl.org/&quot;&gt;OpenSSL&lt;/a&gt;、XMLReader 等各种组件中出现双重释放和不正确行为等问题。php8 解决了错误处理和潜在的崩溃问题。&lt;a href=&quot;https://github.com/SELinuxProject&quot;&gt;selinux-policy&lt;/a&gt; 20231124 的更新修复了 Bugzilla 问题 &lt;a href=&quot;https://bugzilla.opensuse.org/show_bug.cgi?id=1216903&quot;&gt;bsc#1216903&lt;/a&gt;，该问题涉及在尝试应用防火墙规则时指示权限被拒绝错误的错误消息。&lt;a href=&quot;https://github.com/libbpf/libbpf&quot;&gt;libbpf&lt;/a&gt; 1.3.0 的更新带来了对 &lt;a href=&quot;https://www.netfilter.org/&quot;&gt;netfilter&lt;/a&gt; 的支持，并引入了新的节定义、实用宏和用于使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_buffer&quot;&gt;环形缓冲区&lt;/a&gt;的扩展功能。&lt;a href=&quot;https://github.com/openSUSE/libsolv&quot;&gt;libsolv&lt;/a&gt; 0.7.27 的更新引入了对 installcheck 工具的 &lt;a href=&quot;https://facebook.github.io/zstd/&quot;&gt;zstd&lt;/a&gt; 支持，增强了压缩功能，并实现了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putinowndirpool&lt;/code&gt; 缓存。这个新的缓存显着加速了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo_write&lt;/code&gt; 函数内的文件列表处理，从而提高了整体性能。快照中还更新了其他几个软件包。&lt;/p&gt;

&lt;p&gt;快照 &lt;a href=&quot;https://lists.opensuse.org/archives/list/factory@lists.opensuse.org/thread/6RORONYOHB3JVV7ZC74XIY4APLNJTQRC/&quot;&gt;20231124&lt;/a&gt; 中仅更新了两个软件包。新版本的 &lt;a href=&quot;https://github.com/openSUSE/kernel-firmware-nvidia-gspx-G06&quot;&gt;kernel-firmware-nvidia-gspx-G06&lt;/a&gt; 545.29.06 改进了内核模块驱动程序的兼容性和功能，快照中还更新了另一个 &lt;a href=&quot;https://www.nvidia.com/&quot;&gt;NVIDIA&lt;/a&gt; 签名软件包。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://news.opensuse.org/2023/11/30/major-version-of-pipewire-ff-arrive-in-tw/&quot;&gt;Major Versions of PipeWire, Firefox arrive in Tumbleweed&lt;/a&gt;，作者：Douglas DeMaio（插图由 Jakub Steiner 提供）&lt;/p&gt;
</content:encoded>
    </item>

  </channel>
</rss>
